% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/DvFile.R
\name{DvFile}
\alias{DvFile}
\title{MLHIM 2.5.0 DvFile}
\usage{
DvFile(pcm)
}
\arguments{
\item{pcm}{- the XML fragment to parse.}
}
\value{
A dataframe consisting of the vectors listed in the Description.
}
\description{
Returns a data.frame of the collected nodes of a DvFile restriction from the XML fragment.
}
\details{
The vectors are:

label - the descriptive name of the fragment.

vtb - valid time begin, the datetime that this data became valid

vte - valid time end, the datetime this data expired or ceased to be valid

ev_name - exceptional value name. When all data is valid according to the restrictions this is NA.
          See the MLHIM documentation for explainations of Exceptional Values.

size - Original size in bytes of unencoded encapsulated data. I.e. encodings such as base64, hexadecimal, etc. do not change the value of this element.

encoding - Name of character encoding scheme in which this value is encoded.
           Coded from the IANA charcater set table http://www.iana.org/assignments/character-sets
           Unicode is the default assumption in MLHIM2, with UTF-8 being the assumed encoding.
           This attribute allows for variations from these assumptions.

dvfile_language - Optional indicator of the localised language of the content.

formalism - Name of the formalism or syntax used to inform an application regarding a candidate parser to use on the content.
            Examples might include: 'ATL', 'MOLA', 'QVT', 'GDL', 'GLIF', etc.

media_type - Media (MIME) type of the original media-content w/o any compression. See IANA registered types: http://www.iana.org/assignments/media-types/media-types.xhtml

compression_type - Compression/archiving mime-type. If this elements does not exist then it means there is no compression/archiving.
                   For a list of common mime-types for compression/archiving see: http://en.wikipedia.org/wiki/List_of_archive_formats.

hash_result - Hash function result of the 'media-content'. There must be a corresponding hash function type listed for this to have any meaning.
             See: http://en.wikipedia.org/wiki/List_of_hash_functions#Cryptographic_hash_functions

hash_function - Hash function used to compute hash-result. See: http://en.wikipedia.org/wiki/List_of_hash_functions#Cryptographic_hash_functions

alt_txt - Text to display in lieu of multimedia display or execution.

uri - URI reference to electronic information stored outside the record as a file, database entry etc, if supplied as a reference.

media_content - The content, if stored locally as binary content.

text_content - The content, if stored locally as text content.

NOTE: uri, media_content and text_content are mutually exclusive. One and only one of these three will have a value in a valid instance.
}
\examples{
parseBladderTestingOnly <- function(sourceName){

doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)
root <- XML::xmlRoot(doc)

pcm <- XML::getNodeSet(root, '//mlhim2:pcs-780f834c-f29f-46aa-bb50-3384e9884138', c(mlhim2='http://www.mlhim.org/ns/mlhim2/'))

data <- lapply(pcm, mlhim250rm::DvFile)
data <- data.table::rbindlist(data)
data$ccd <- XML::xmlName(root)
data$pcs <- 'pcs-780f834c-f29f-46aa-bb50-3384e9884138'
data$sourceName <- sourceName

return(data)
}
}

